{"version":3,"sources":["webpack:///./js/getGeoPosition.js","webpack:///./js/fetchWeather.js","webpack:///./index.js"],"names":["getGeoPosition","options","maximumAge","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","fetchWeather","query","fetch","then","responce","json","PNotify","defaults","styling","refs","form","document","querySelector","location","temperature","humidity","wind","conditions","icon","markupHtml","object","setAttribute","current","condition","text","addContent","name","temp_c","wind_kph","classList","remove","ref","content","textContent","position","coords","latitude","longitude","catch","error","addEventListener","e","preventDefault","input","currentTarget","city","value","console"],"mappings":"6JASeA,iCARQ,WACrB,IAAMC,EAAU,CACdC,WAAY,MAEd,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAQJ,OCQ/CQ,EAbM,SAAAC,GAQnB,OAAOC,MANI,+EAIuCD,GAEJE,KAAK,SAAAC,GAAQ,OACzDA,EAASC,UCLbC,IAAQC,SAASC,QAAU,WAE3B,IAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,gBAC7BC,SAAUF,SAASC,cAAc,2BACjCE,YAAaH,SAASC,cAAc,uBACpCG,SAAUJ,SAASC,cAAc,2BACjCI,KAAML,SAASC,cAAc,uBAC7BK,WAAYN,SAASC,cAAc,6BACnCM,KAAMP,SAASC,cAAc,UA6B/B,SAASO,EAAWC,GAClBX,EAAKS,KAAKG,aAAa,MAAOD,EAAOE,QAAQC,UAAUC,MACvDf,EAAKS,KAAKG,aAAa,MAAvB,SAAuCD,EAAOE,QAAQC,UAAUL,MAChEO,EAAWhB,EAAKI,SAAUO,EAAOP,SAASa,MAC1CD,EAAWhB,EAAKK,YAAN,GAAsBM,EAAOE,QAAQK,QAC/CF,EAAWhB,EAAKM,SAAaK,EAAOE,QAAQP,SAAlC,MACVU,EAAWhB,EAAKO,KAASI,EAAOE,QAAQM,SAA9B,QACVH,EAAWhB,EAAKQ,WAAYG,EAAOE,QAAQC,UAAUC,MACrDb,SAASC,cAAc,YAAYiB,UAAUC,OAAO,aAGtD,SAASL,EAAWM,EAAKC,GACvBD,EAAIE,YAAcD,EAtCpBzC,IACGY,KAAK,SAAA+B,GACJ,IAAMC,EAASD,EAASC,OACxB,OAAOnC,EAAgBmC,EAAOC,SAAX,IAAuBD,EAAOE,aAElDlC,KAAK,SAAAC,GAAQ,OAAIe,EAAWf,KAC5BkC,MAAM,WACLhC,IAAQiC,MAAM,CACZf,KACE,yEAIRf,EAAKC,KAAK8B,iBAAiB,SAE3B,SAAoBC,GAClBA,EAAEC,iBACF,IACMC,EADOF,EAAEG,cACIC,KACb5C,EAAQ0C,EAAMG,MACpB9C,EAAaC,GACVE,KAAK,SAAAC,GAAQ,OAAIe,EAAWf,KAC5BkC,MAAM,SAAAC,GAAK,OAAIQ,QAAQR,MAAMA,KAChCI,EAAMG,MAAQ","file":"main.c6773bac668bc947105a.js","sourcesContent":["'use strict';\r\nconst getGeoPosition = () => {\r\n  const options = {\r\n    maximumAge: 180000,\r\n  };\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n  });\r\n};\r\nexport default getGeoPosition;","'use strict';\r\nconst fetchWeather = query => {\r\n  const options = {\r\n    baseUrl: 'https://api.apixu.com/v1/current.json',\r\n    apiKey: 'f7fd0010fef04f29b03124816191907',\r\n  };\r\n\r\n  const requestParams = `?key=${options.apiKey}&q=${query}`;\r\n\r\n  return fetch(options.baseUrl + requestParams).then(responce =>\r\n    responce.json(),\r\n  );\r\n};\r\n\r\nexport default fetchWeather;\r\n","import './styles.css';\nimport PNotify from '../node_modules/pnotify/dist/es/PNotify';\nimport PNotifyStyleMaterial from 'pnotify/dist/es/PNotifyStyleMaterial.js';\nimport getGeoPosition from './js/getGeoPosition';\nimport fetchWeather from './js/fetchWeather';\nPNotify.defaults.styling = 'material';\n\nconst refs = {\n  form: document.querySelector('#search-form'),\n  location: document.querySelector('[data-field=\"location\"]'),\n  temperature: document.querySelector('[data-field=\"temp\"]'),\n  humidity: document.querySelector('[data-field=\"humidity\"]'),\n  wind: document.querySelector('[data-field=\"wind\"]'),\n  conditions: document.querySelector('[data-field=\"conditions\"]'),\n  icon: document.querySelector('.icon'),\n};\n\ngetGeoPosition()\n  .then(position => {\n    const coords = position.coords;\n    return fetchWeather(`${coords.latitude},${coords.longitude}`);\n  })\n  .then(responce => markupHtml(responce))\n  .catch(() => {\n    PNotify.error({\n      text:\n        'Нет права доступа к геопозиции, используйте поиск по имени города.',\n    });\n  });\n\nrefs.form.addEventListener('submit', formSubmit);\n\nfunction formSubmit(e) {\n  e.preventDefault();\n  const form = e.currentTarget;\n  const input = form.city;\n  const query = input.value;\n  fetchWeather(query)\n    .then(responce => markupHtml(responce))\n    .catch(error => console.error(error));\n  input.value = '';\n}\n\nfunction markupHtml(object) {\n  refs.icon.setAttribute('alt', object.current.condition.text);\n  refs.icon.setAttribute('src', `https:${object.current.condition.icon}`);\n  addContent(refs.location, object.location.name);\n  addContent(refs.temperature, `${object.current.temp_c}`);\n  addContent(refs.humidity, `${object.current.humidity} %`);\n  addContent(refs.wind, `${object.current.wind_kph} kph`);\n  addContent(refs.conditions, object.current.condition.text);\n  document.querySelector('#weather').classList.remove('is-hidden');\n}\n\nfunction addContent(ref, content) {\n  ref.textContent = content;\n}\n"],"sourceRoot":""}